!function(e,a){if("object"==typeof exports&&"object"==typeof module)module.exports=a();else if("function"==typeof define&&define.amd)define([],a);else{var r=a();for(var s in r)("object"==typeof exports?exports:e)[s]=r[s]}}(self,(function(){return(()=>{"use strict";var e={};return(()=>{var a=e;Object.defineProperty(a,"__esModule",{value:!0}),a.joiPasswordExtendCore=void 0,a.joiPasswordExtendCore=function(e){return{type:"string",base:e.string(),messages:{"password.minOfUppercase":"{#label} should contain at least {#min} uppercase character","password.minOfSpecialCharacters":"{#label} should contain at least {#min} special character","password.minOfLowercase":"{#label} should contain at least {#min} lowercase character","password.minOfNumeric":"{#label} should contain at least {#min} numeric character","password.noWhiteSpaces":"{#label} should not contain white spaces","password.onlyLatinCharacters":"{#label} should only contain latin characters"},rules:{minOfUppercase:{method(e){return this.$_addRule({name:"minOfUppercase",args:{min:e}})},args:[{name:"min",assert:e=>"number"==typeof e&&!isNaN(e),message:"must be a number"}],validate:(e,a,{min:r=0})=>new RegExp(`(?=(.*[A-Z]){${r}})`).test(e)?e:a.error("password.minOfUppercase",{min:r})},minOfLowercase:{method(e){return this.$_addRule({name:"minOfLowercase",args:{min:e}})},args:[{name:"min",assert:e=>"number"==typeof e&&!isNaN(e),message:"must be a number"}],validate:(e,a,{min:r=0})=>new RegExp(`(?=(.*[a-z]){${r}})`).test(e)?e:a.error("password.minOfLowercase",{min:r})},minOfSpecialCharacters:{method(e){return this.$_addRule({name:"minOfSpecialCharacters",args:{min:e}})},args:[{name:"min",assert:e=>"number"==typeof e&&!isNaN(e),message:"must be a number"}],validate:(e,a,{min:r=0})=>e.length-(e.match(/[a-zA-Z0-9]/g)||[]).length<r?a.error("password.minOfSpecialCharacters",{min:r}):e},minOfNumeric:{method(e){return this.$_addRule({name:"minOfNumeric",args:{min:e}})},args:[{name:"min",assert:e=>"number"==typeof e&&!isNaN(e),message:"must be a number"}],validate:(e,a,{min:r=0})=>new RegExp(`(?=(.*[0-9]){${r}})`,"g").test(e)?e:a.error("password.minOfNumeric",{min:r})},noWhiteSpaces:{validate:(e,a)=>new RegExp(" ","g").test(e)?a.error("password.noWhiteSpaces"):e},onlyLatinCharacters:{validate:(e,a)=>new RegExp("[^a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/? ]","g").test(e)?a.error("password.onlyLatinCharacters"):e}}}}})(),e})()}));